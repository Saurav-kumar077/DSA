#include<unordered_map>
#include<list>
#include<queue>

bool isCyclicDfs(int node ,int parent, unordered_map<int , bool> &visited ,unordered_map<int , list<int>> &adj){
    visited[node]=true; 
    for (auto neighbor :adj[node]){
        if(!visited[neighbor]){
            bool cycle_detected = isCyclicDfs(neighbor ,node , visited , adj);
            if(cycle_detected){
                return true ; 
            }
        }
        else if(neighbor!=parent){
            return true ; 
        }
    }
    return false ; 
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int , list<int>>adj;
    for(int i=0;i<m;i++){
        int u = edges[i][0];
        int v = edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    //handle the disconnected components of the graph
    unordered_map<int , bool>visited;
    for(int i=0;i<n;i++){
        if(!visited[i]){
            bool ans = isCyclicDfs(i,-1 , visited,adj);
            if(ans==1){
                return "Yes";
            }
        }
    }
    return "No";
}
