// Structure of node
/*class Node {
   public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

class Solution {
    public:
    int countNode(Node*tree){
        if(tree==NULL){
            return 0;
        }
        int ans=1+countNode(tree->left)+countNode(tree->right);
        return ans;
    }
    bool isCBT(Node*tree,int index,int count){
        if(tree==NULL){
            return true;
        }
        if(index>=count){
            return false;
        }
        else{
            bool left=isCBT(tree->left,2*index+1,count);
            bool right=isCBT(tree->right,2*index+2,count);
            return (left && right);
        }
    }
    bool isMaxOrder(Node*tree){
        if(tree->left==NULL && tree->right==NULL){
            return true;
        }
        if(tree->right == NULL){
        return (tree->left != NULL && tree->data >= tree->left->data && isMaxOrder(tree->left));
    }
        bool left=isMaxOrder(tree->left);
        bool right=isMaxOrder(tree->right);
        return (left && right&& (tree->data > tree->left->data && tree->data > tree->right->data));
        
    }
  
    bool isHeap(Node* tree) {
       int index=0;
       int totalCount=countNode(tree);
       if(isCBT(tree,index,totalCount)&&isMaxOrder(tree)){
           return true;
       }
       else{
           return false;
       }
        
    }
};
